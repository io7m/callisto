//
// Copyright Â© 2017 <code@io7m.com> http://io7m.com
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//

syntax = "proto3";

option optimize_for        = LITE_RUNTIME;
option java_multiple_files = true;

package com.io7m.callisto.prototype0.messages;

import "StringConstantPool.proto";

message CoHello
{
  bytes  password         = 1;
  uint32 bytes_per_second = 2;
}

message CoHelloResponseOK
{
  fixed32 connection_id      = 1;
  uint32  ticks_per_second   = 2;
  uint32  ticks_reliable_ttl = 3;
  uint32  ticks_timeout      = 4;
}

message CoHelloResponseError
{
  string message = 1;
}

message CoHelloResponse
{
  oneof value {
    CoHelloResponseOK    ok    = 1;
    CoHelloResponseError error = 2;
  }
}

message CoPacketID
{
  fixed32 connection_id = 1;
  uint32  channel       = 2;
  uint32  sequence      = 3;
}

message CoMessage
{
  uint32           message_id   = 1;
  CoStringConstant message_type = 2;
  bytes            message_data = 3;
}

message CoDataReliable
{
  CoPacketID         id       = 1;
  repeated CoMessage messages = 2;
}

message CoDataUnreliable
{
  CoPacketID         id       = 1;
  repeated CoMessage messages = 2;
}

message CoDataReliableFragment
{
  CoPacketID       id             = 1;
  uint32           fragment_index = 2;
  uint32           fragment_count = 3;
  uint32           message_id     = 4;
  CoStringConstant message_type   = 5;
  bytes            message_data   = 6;
}

message CoDataAck
{
  CoPacketID      id                              = 1;
  repeated uint32 sequences_reliable_not_received = 2;
}

message CoBye
{
  fixed32 connection_id = 1;
  string  message       = 2;
}

message CoPing
{
  fixed32 connection_id = 1;
}

message CoPong
{
  fixed32 connection_id = 1;
}

message CoPacket
{
  oneof value {
    CoHello                hello                  = 1;
    CoHelloResponse        hello_response         = 2;
    CoDataReliable         data_reliable          = 3;
    CoDataUnreliable       data_unreliable        = 4;
    CoDataReliableFragment data_reliable_fragment = 5;
    CoDataAck              data_ack               = 6;
    CoBye                  bye                    = 7;
    CoPing                 ping                   = 8;
    CoPong                 pong                   = 9;
  }
}